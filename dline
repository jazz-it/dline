#!/usr/bin/env bash
SCRIPTPATH="$(
    cd -- "$(dirname "$0")" >/dev/null 2>&1
    pwd -P
)"
source ${SCRIPTPATH}/calendar.sh

# NOTE: This requires GNU getopt. On Mac OS X and FreeBSD, you have to install this
# separately.

# Option defaults
OPT=""

# Script version
version="0.0.2-1"

# getopts string
# This string needs to be updated with the single character options (e.g. -f)
opts="set"

# Gets the command name without path
cmd() { echo $(basename $0); }

# Help command output
usage() {
    IFS="/"
    output1=$(date -d "+15 days" "+%Y/%m/%d")
    # Use the read command to split the output into separate variables
    read year month day <<< "$output1"
    unset IFS
    printf -v day_zero '%02d' "$day"
    printf -v month_zero '%02d' "$month"
    echo "\

Usage:
 `cmd` -s; set a deadline through interactive mode
 `cmd` -s ${year}/${month_zero}/${day_zero}; set a deadline directly
 `cmd`; display a calendar
;
Options:
-h, --help; display this help
-s, --set [YYYY/MM/DD]; set a deadline: if the optional argument is missing 
; or invalid, interactive mode is called
-v, --version; display version
" | column -t -s ";"
}

# Error message
error() {
    echo "`cmd`: invalid option -- '$1'"
    echo "Try `cmd` -h' for more information."
    exit 1
}

# There's two passes here. The first pass handles the long options and
# any short option that is already in canonical form. The second pass
# uses `getopt` to canonicalize any remaining short options and handle
# them
for pass in 1 2; do
    while [ -n "$1" ]; do
        case $1 in
        --)
            shift
            break
            ;;
        -*) case $1 in
            -s | --set) s="set" ;;
            -v | --version) v="set" ;;
            -h | --help) usage && exit 0 ;;
            --*) error $1 ;;
            -*) if [ $pass -eq 1 ]; then
                ARGS="$ARGS $1"
            else error $1; fi ;;
            esac ;;
        *) if [ $pass -eq 1 ]; then
            ARGS="$ARGS $1"
        else error $1; fi ;;
        esac
        shift
    done
    if [ $pass -eq 1 ]; then
        ARGS=$(getopt $opts $ARGS)
        if [ $? != 0 ]; then
            usage
            exit 2
        fi
        set -- $ARGS
    fi
done

now=$(date "+%s")
if [[ "$s" == "set" ]] && [[ $1 =~ ^[0-9]{4}\/[0-9]{2}\/[0-9]{2}$ ]] && [[ $(date -d "$1" "+%s") -gt $now ]]; then
    set_dcal $1
    unset s
    exit 0
elif [[ "$s" == "set" ]]; then
    set_dcal
    exit 0
# Handle positional arguments
elif [[ "$v" == "set" ]]; then
    echo "`cmd`: Version $version"
    exit 0
# Handle positional arguments
elif [ -n "$*" ]; then
    echo "`cmd`: Extra arguments -- $*"
    echo "Try `cmd` -h' for more information."
    exit 1
else
    # Run the main app when no arguments are passed
    dcal
fi
